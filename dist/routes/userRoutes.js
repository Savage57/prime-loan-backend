"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userController_1 = require("../controllers/userController");
const middlewares_1 = require("../middlewares");
const validations_1 = require("../validations");
const enhancedTransferController_1 = require("../controllers/enhancedTransferController");
const middlewares_2 = require("../middlewares");
const router = express_1.default.Router();
router.get("/account-enquiry", (0, middlewares_1.verifyJwtRest)(), userController_1.beneficiaryEnquiry);
router.get("/get-user", (0, middlewares_1.verifyJwtRest)(), userController_1.getUser);
router.get("/get-admin", (0, middlewares_1.verifyJwtRest)(), userController_1.getAdmin);
router.post("/create-super-admin", (0, middlewares_1.verifyJwtRest)(), (0, middlewares_1.validateReqBody)(validations_1.createAdminAccountSchema), userController_1.createSuperAdminAccount);
router.post("/activate-admin", (0, middlewares_1.verifyJwtRest)(), (0, middlewares_1.validateReqBody)(validations_1.activateAdminReqBodySchema), userController_1.ActivateAndDeactivateAdmin);
router.post("/activate-user", (0, middlewares_1.verifyJwtRest)(), (0, middlewares_1.validateReqBody)(validations_1.activateUserReqBodySchema), userController_1.ActivateAndDeactivateUser);
router.get("/get-users", (0, middlewares_1.verifyJwtRest)(), userController_1.getUsers);
router.get("/my-enquiry", (0, middlewares_1.verifyJwtRest)(), userController_1.accountEnquiry);
router.post("/create-admin", (0, middlewares_1.validateReqBody)(validations_1.createAdminAccountSchema), userController_1.createAdminAccount);
router.post("/create-client", (0, middlewares_1.validateReqBody)(validations_1.createClientAccountSchema), userController_1.createClientAccount);
router.patch("/update-client", (0, middlewares_1.validateReqBody)(validations_1.updateUserSchema), (0, middlewares_1.verifyJwtRest)(), userController_1.updateClientAccount);
router.post("/login", (0, middlewares_1.validateReqBody)(validations_1.loginReqBodySchema), userController_1.login);
router.post("/initiate-reset", userController_1.initiateReset);
router.post("/validate-reset", userController_1.validateReset);
router.post("/update-password-or-pin", userController_1.updatePasswordOrPin);
router.post("/change-password", (0, middlewares_1.validateReqBody)(validations_1.changePasswordSchema), userController_1.changePassword);
router.get("/logout", (0, middlewares_1.verifyJwtRest)(), userController_1.logout);
router.get("/bank-listing", (0, middlewares_1.verifyJwtRest)(), userController_1.bankListing);
router.post("/transfer", (0, middlewares_1.verifyJwtRest)(), (0, middlewares_1.validateReqBody)(validations_1.transferSchema), userController_1.transfer);
router.post("/transfer-enhanced", (0, middlewares_1.verifyJwtRest)(), (0, middlewares_1.validateReqBody)(validations_1.transferSchema), (0, middlewares_2.idempotencyMiddleware)(), enhancedTransferController_1.enhancedTransfer);
router.post("/wallet-alert", (0, middlewares_1.validateReqBody)(validations_1.walletAlertsSchema), userController_1.walletAlerts);
router.post("/initiate-linking", (0, middlewares_1.verifyJwtRest)(), (0, middlewares_1.validateReqBody)(validations_1.initiateAccountLinking), userController_1.initializeLinking);
router.post("/confirm-linking", (0, middlewares_1.verifyJwtRest)(), (0, middlewares_1.validateReqBody)(validations_1.confirmAccountLinking), userController_1.confirmLinking);
router.post("/link-account", (0, middlewares_1.verifyJwtRest)(), (0, middlewares_1.validateReqBody)(validations_1.linkedAccountSchema), userController_1.linkAccount);
router.post("/unlink-account/:id", (0, middlewares_1.verifyJwtRest)(), userController_1.unlinkAccount);
router.get("/account-details/:id", (0, middlewares_1.verifyJwtRest)(), userController_1.accountDetails);
exports.default = router;
